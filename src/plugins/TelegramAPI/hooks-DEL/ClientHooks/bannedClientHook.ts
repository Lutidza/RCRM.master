// üìå –ü—É—Ç—å: src/plugins/TelegramAPI/hooks/ClientHooks/bannedClientHook.ts
// üìå –í–µ—Ä—Å–∏—è: 1.0.1
//
// [CHANGELOG]
// - –ó–∞–º–µ–Ω—ë–Ω console.log –Ω–∞ log –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
// - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞.
// - –£–ª—É—á—à–µ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–¥–∞.

import type { Context } from 'grammy';
import type { Payload } from 'payload';
import { log } from '@/plugins/TelegramAPI/utils/SystemUtils/Logger';

interface SessionData {
  previousMessages: number[];
}

type BotContext = Context & { session: SessionData };

/**
 * –•—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
 * –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Payload CMS –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π:
 *  - –ò—â–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "clients" –ø–æ telegram_id,
 *  - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–µ status (—á–µ—Ä–µ–∑ alias, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "statuses"),
 *  - –ï—Å–ª–∏ alias —Ä–∞–≤–µ–Ω "banned", –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ—á–∏—â–∞–µ—Ç —Å–µ—Å—Å–∏—é –∏ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É.
 *
 * @param {Payload} payload - –≠–∫–∑–µ–º–ø–ª—è—Ä Payload CMS –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.
 * @returns {Function} –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ update-–ø–∞–π–ø–ª–∞–π–Ω–µ –±–æ—Ç–∞.
 */
export function bannedClientHook(payload: Payload) {
  return async (ctx: BotContext, next: () => Promise<void>): Promise<void> => {
    try {
      if (ctx.from) {
        const telegramId = ctx.from.id;

        // –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "clients" –ø–æ telegram_id
        const { docs } = await payload.find({
          collection: 'clients',
          where: { telegram_id: { equals: telegramId } },
          limit: 1,
        });

        const client = docs && docs.length > 0 ? docs[0] : null;

        if (client && client.status) {
          let banned = false;
          let statusAlias: string | undefined;

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
          if (typeof client.status === 'object' && client.status !== null) {
            if ('alias' in client.status && typeof client.status.alias === 'string') {
              statusAlias = client.status.alias;
              banned = statusAlias === 'banned';
            } else if ('id' in client.status) {
              const statusResult = await payload.find({
                collection: 'statuses',
                where: { id: { equals: client.status.id } },
                limit: 1,
              });
              const statusDoc = statusResult.docs[0];
              if (statusDoc) {
                statusAlias = statusDoc.alias;
                banned = statusAlias === 'banned';
              }
            }
          } else {
            // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            const statusResult = await payload.find({
              collection: 'statuses',
              where: { id: { equals: client.status } },
              limit: 1,
            });
            const statusDoc = statusResult.docs[0];
            if (statusDoc) {
              statusAlias = statusDoc.alias;
              banned = statusAlias === 'banned';
            }
          }

          log(
            'info',
            `[bannedClientHook] Client ID=${client.id} status alias: ${statusAlias}; banned: ${banned}`,
            payload
          );

          if (banned) {
            await ctx.reply("üíÄ Your account is locked! üíÄ \n\n üö∑ Looks like you've been cast out‚Ä¶\n And now you can fully enjoy the void");
            // Clear the session
            ctx.session = { previousMessages: [] };
            return; // Stop further processing of the update
          }
        }
      }
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–±–∞–Ω–µ–Ω
      await next();
    } catch (error: any) {
      log('error', `–û—à–∏–±–∫–∞ –≤ bannedClientHook: ${error.message}`, payload);
      await next(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏
    }
  };
}
