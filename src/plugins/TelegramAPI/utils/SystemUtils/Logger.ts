// üìå –ü—É—Ç—å: src/plugins/TelegramAPI/utils/SystemUtils/Logger.ts
// üìå –í–µ—Ä—Å–∏—è: 1.1.0
//
// [CHANGELOG]
// - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç `Payload` –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏.
// - –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ `Payload`.
// - –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –±–ª–æ–∫–µ Payload CMS –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.

import type { Payload } from 'payload';

/**
 * –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @param {string} level - –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ('info', 'debug', 'error').
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @param {Payload} [payload] - –≠–∫–∑–µ–º–ø–ª—è—Ä Payload CMS –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞.
 * @param {Record<string, any>} [context] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞).
 */
export function log(
  level: 'info' | 'debug' | 'error',
  message: string,
  payload?: Payload,
  context?: Record<string, any>
): void {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] [${level.toUpperCase()}] ${message}`;

  // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
  if (context && Object.keys(context).length > 0) {
    console.log(logMessage, context);
  } else {
    console.log(logMessage);
  }

  // –í—ã–≤–æ–¥ —á–µ—Ä–µ–∑ Payload CMS, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
  if (payload?.logger && typeof payload.logger[level] === 'function') {
    try {
      payload.logger[level](message, context || {});
    } catch (err: any) {
      console.error(
        `[${timestamp}] [ERROR] –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Payload CMS: ${err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      );
    }
  }
}
