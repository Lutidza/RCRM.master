// üìå –ü—É—Ç—å: src/plugins/TelegramAPI/utils/SystemUtils/clearPreviousMessages.ts
// üìå –í–µ—Ä—Å–∏—è: 1.3.4
//
// [CHANGELOG]
// - –î–æ–±–∞–≤–ª–µ–Ω–æ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ `message_id`.
// - –û–±–µ—Å–ø–µ—á–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

import type { Context, SessionFlavor } from 'grammy';
import { log } from '@/plugins/TelegramAPI/utils/SystemUtils/Logger';

interface SessionData {
  previousMessages: number[];
}

export type BotContext = Context & SessionFlavor<SessionData>;

/**
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏, ID –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–µ—Å—Å–∏–∏.
 * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞ (BotContext)
 */
export async function clearPreviousMessages(ctx: BotContext): Promise<void> {
  if (!ctx.chat || !ctx.session || !Array.isArray(ctx.session.previousMessages)) {
    log('debug', '–ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');
    return;
  }

  const chatId = ctx.chat.id;
  const messageIds = ctx.session.previousMessages;

  log(
    'debug',
    `–ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${messageIds.length}. –¢–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${JSON.stringify(
      messageIds
    )}`
  );

  try {
    for (const msgId of messageIds) {
      try {
        // –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏ (reply_markup)
        await ctx.api.editMessageReplyMarkup(chatId, msgId, { reply_markup: undefined });
        log('debug', `–ö–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è ${msgId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.`);
      } catch (error: any) {
        log(
          'debug',
          `–ö–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è ${msgId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω—ã: ${error.message}`
        );
      }

      try {
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await ctx.api.deleteMessage(chatId, msgId);
        log('debug', `–°–æ–æ–±—â–µ–Ω–∏–µ ${msgId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.`);
      } catch (error: any) {
        log('error', `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${msgId}: ${error.message}`);
      }
    }
  } catch (err: any) {
    log('error', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: ${err.message}`);
  } finally {
    // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    ctx.session.previousMessages = [];
    log('debug', `–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω.`);
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é.
 * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞ (BotContext)
 * @param messageId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export function storeMessageId(ctx: BotContext, messageId: number): void {
  if (!messageId) {
    log('error', `storeMessageId: –ü–µ—Ä–µ–¥–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π messageId: ${messageId}`);
    return;
  }

  if (ctx.session && Array.isArray(ctx.session.previousMessages)) {
    ctx.session.previousMessages.push(messageId);
    log(
      'debug',
      `storeMessageId: –°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–µ—Å—Å–∏—é. –¢–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${JSON.stringify(
        ctx.session.previousMessages
      )}`
    );
  } else {
    log('error', `storeMessageId: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –≤ —Å–µ—Å—Å–∏—é.`);
  }
}
