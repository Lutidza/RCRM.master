// Path: src/plugins/TelegramAPI/utils/BotUtils/initializeBots.ts
// Version: 1.4.1
//
// [CHANGELOG]
// - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ BotConfig –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–æ–≤.
// - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start: –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è processClient, —Ñ–ª–∞–≥ isBanned —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Å–µ—Å—Å–∏—é.
// - Middleware bannedClientHook –ø–æ–¥–∫–ª—é—á—ë–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞.
// - –î–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (total_visit === 1) –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è layout —Å alias "start_first_visit" —á–µ—Ä–µ–∑ BotConfig.
import type { Payload } from 'payload';
import { Bot as TelegramBot } from 'grammy';
import { session, Context, SessionFlavor } from 'grammy';
import { handleCatalogEvent } from '@/plugins/TelegramAPI/utils/BlockUtils/CatalogBlock/CatalogEventHandlers';
import { sendLayoutBlock } from '@/plugins/TelegramAPI/utils/BlockUtils/LayoutBlock/LayoutBlock';
import { bannedClientHook } from '@/plugins/TelegramAPI/utils/ClientUtils/bannedClient';
import { log } from '@/plugins/TelegramAPI/utils/SystemUtils/Logger';
import { processMessageBlock } from '@/plugins/TelegramAPI/utils/BlockUtils/MessageBlock/index';
import { renderCatalogBlock } from '@/plugins/TelegramAPI/utils/BlockUtils/CatalogBlock/renderCatalogBlock';
import { BotConfig } from '@/plugins/TelegramAPI/utils/BotUtils/BotConfig';
import { processClient } from '@/plugins/TelegramAPI/utils/ClientUtils/processClient';

export interface SessionData {
  previousMessages: number[];
  isBanned?: boolean;
}

export type BotContext = Context & SessionFlavor<SessionData>;

export interface UnifiedBotInterface {
  blocks?: any[];
  defaultStartLayout: string;
  defaultFirstVisitLayout: string;
  total_visit?: number;
}

export interface UnifiedBotConfig {
  id: number;
  name: string;
  token: string;
  description?: string;
  enabled: string;
  initialization_status: string;
  last_initialized?: string;
  interface?: UnifiedBotInterface;
}

export function createUnifiedBotConfig(rawBotData: any): UnifiedBotConfig {
  return {
    id: rawBotData.id,
    name: rawBotData.name,
    token: rawBotData.token,
    description: rawBotData.description,
    enabled: rawBotData.enabled,
    initialization_status: rawBotData.initialization_status,
    last_initialized: rawBotData.last_initialized,
    interface: rawBotData.interface
      ? {
        blocks: Array.isArray(rawBotData.interface.blocks) ? rawBotData.interface.blocks : [],
        defaultStartLayout: rawBotData.interface.defaultStartLayout,
        defaultFirstVisitLayout: rawBotData.interface.defaultFirstVisitLayout,
        total_visit: typeof rawBotData.interface.total_visit === 'number' ? rawBotData.interface.total_visit : 0,
      }
      : undefined,
  };
}

export async function initializeBots(payload: Payload): Promise<void> {
  try {
    log('info', '–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤...', payload);
    const { docs: bots } = await payload.find({
      collection: 'bots',
      where: { enabled: { equals: 'enabled' } },
      limit: 999,
    });
    log('info', `–ù–∞–π–¥–µ–Ω–æ ${bots.length} –±–æ—Ç–æ–≤ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.`, payload);

    for (const botData of bots) {
      const unifiedBotData = createUnifiedBotConfig(botData);
      const botConfig = new BotConfig(unifiedBotData);

      console.log('BotConfig:', JSON.stringify(botConfig, null, 2));
      await initBot(payload, botConfig);
    }
  } catch (error: any) {
    log('error', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤: ${error.message}`, payload);
  }
}

async function initBot(payload: Payload, botConfig: BotConfig): Promise<void> {
  try {
    if (!botConfig.token) {
      log('error', `–ü—Ä–æ–ø—É—â–µ–Ω –±–æ—Ç "${botConfig.name}": –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω.`, payload);
      return;
    }
    const bot = new TelegramBot<BotContext>(botConfig.token);

    bot.use(
      session<SessionData, BotContext>({
        initial: () => ({ previousMessages: [] }),
      })
    );

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–∏–∑ bannedClient.ts)
    bot.use(bannedClientHook(payload));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    bot.command('start', async (ctx) => {
      try {
        log('info', `–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}.`, payload);
        const telegramId = ctx.from?.id;
        if (!telegramId) {
          await ctx.reply('–û—à–∏–±–∫–∞: Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
          return;
        }
        const configInstance = botConfig instanceof BotConfig ? botConfig : new BotConfig(botConfig);
        const YOUR_BOT_ID = botConfig.id;
        const client = await processClient(payload, telegramId, YOUR_BOT_ID, {
          first_name: ctx.from?.first_name,
          last_name: ctx.from?.last_name,
          username: ctx.from?.username,
        });
        ctx.session.isBanned = client.isBanned;
        const layoutAlias = configInstance.currentLayoutAlias;
        log('info', `–í—ã–±—Ä–∞–Ω layoutAlias: ${layoutAlias}`, payload);
        await sendLayoutBlock(ctx, configInstance, payload);
      } catch (error: any) {
        log('error', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start: ${error.message}`, payload);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback‚Äë–∑–∞–ø—Ä–æ—Å–æ–≤
    bot.on('callback_query:data', async (ctx) => {
      try {
        const data = ctx.callbackQuery?.data;
        if (!data) {
          await ctx.reply('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ callback –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
          return;
        }
        const [cbType, callbackAlias] = data.split('|');
        if (!cbType || !callbackAlias) {
          await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback.');
          return;
        }
        switch (cbType) {
          case 'layout': {
            await sendLayoutBlock(ctx, botConfig, payload, callbackAlias);
            log('info', `Layout "${callbackAlias}" —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.`, payload);
            break;
          }
          case 'message': {
            await processMessageBlock(ctx, { message: callbackAlias });
            log('info', `MessageBlock "${callbackAlias}" —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.`, payload);
            break;
          }
          case 'catalog': {
            await renderCatalogBlock(ctx, { alias: callbackAlias }, payload);
            log('info', `CatalogBlock "${callbackAlias}" —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.`, payload);
            break;
          }
          default: {
            await handleCatalogEvent(cbType, callbackAlias, '', ctx, payload);
            log('info', `Callback "${cbType}|${callbackAlias}" –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ handleCatalogEvent.`, payload);
          }
        }
        await ctx.answerCallbackQuery();
      } catch (error: any) {
        log('error', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_query: ${error.message}`, payload);
      }
    });

    bot.start();
    log('info', `ü§ñ –ë–æ—Ç "${botConfig.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.`, payload);
    await payload.update({
      collection: 'bots',
      id: botConfig.id,
      data: {
        initialization_status: 'Initialized',
        last_initialized: new Date().toISOString(),
      },
    });
  } catch (error: any) {
    log('error', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ "${botConfig.name}": ${error.message}`, payload);
    await payload.update({
      collection: 'bots',
      id: botConfig.id,
      data: { initialization_status: 'Error' },
    });
  }
}
