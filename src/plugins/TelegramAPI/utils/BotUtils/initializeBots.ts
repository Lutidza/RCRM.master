// Path: src/plugins/TelegramAPI/utils/BotUtils/initializeBots.ts
// Version: 1.4.4-refactored
// –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: –û–±–Ω–æ–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã —Ç–∏–ø–æ–≤ (BotContext, SessionData) –∏–∑ –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞ TelegramBlocksTypes.ts,
// –¥–æ–±–∞–≤–ª–µ–Ω–æ —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Å –¥–≤—É–º—è —Ç–∏–ø–æ–≤—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏,
// –∞ —Ç–∞–∫–∂–µ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã bot.use –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö middleware.

import type { Payload } from 'payload';
import { Bot as TelegramBot, session } from 'grammy';

import { bannedClientHook } from '@/plugins/TelegramAPI/utils/ClientUtils/bannedClient';
import { processClient } from '@/plugins/TelegramAPI/utils/ClientUtils/processClient';
import { sendLayoutBlock } from '@/plugins/TelegramAPI/utils/BlockUtils/LayoutBlock/LayoutBlock';
import { processMessageBlock } from '@/plugins/TelegramAPI/utils/BlockUtils/MessageBlock/index';
import { renderCatalogBlock } from '@/plugins/TelegramAPI/utils/BlockUtils/CatalogBlock/renderCatalogBlock';
import { handleCatalogEvent } from '@/plugins/TelegramAPI/utils/BlockUtils/CatalogBlock/CatalogEventHandlers';
import { log } from '@/plugins/TelegramAPI/utils/SystemUtils/Logger';
import { BotConfig } from '@/plugins/TelegramAPI/utils/BotUtils/BotConfig';
import { goBackState } from '@/plugins/TelegramAPI/utils/SystemUtils/goBackState';
// –ò–º–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –∏–∑ –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞
import type { BotContext, SessionData } from '@/plugins/TelegramAPI/types/TelegramBlocksTypes';

export type { BotContext };

export interface UnifiedBotInterface {
  blocks: any[];
  defaultStartLayout: string;
  defaultFirstVisitLayout: string;
  total_visit: number;
}

export interface UnifiedBotConfig {
  id: number;
  name: string;
  token: string;
  description?: string;
  enabled: string;
  initialization_status: string;
  last_initialized?: string;
  interface?: Partial<UnifiedBotInterface>;
}

/**
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞ (–∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Bots)
 * –≤ –µ–¥–∏–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ (UnifiedBotConfig). –ï—Å–ª–∏ rawBotData.interface –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç,
 * –µ–≥–æ –ø–æ–ª—è –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è —Å –Ω–∞–±–æ—Ä–æ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π; –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äì –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
 */
export function createUnifiedBotConfig(rawBotData: any): UnifiedBotConfig {
  const defaultInterface: UnifiedBotInterface = {
    blocks: [],
    defaultStartLayout: 'start',
    defaultFirstVisitLayout: 'start_first_visit',
    total_visit: 0,
  };
  return {
    id: rawBotData.id,
    name: rawBotData.name,
    token: rawBotData.token,
    description: rawBotData.description,
    enabled: rawBotData.enabled,
    initialization_status: rawBotData.initialization_status,
    last_initialized: rawBotData.last_initialized,
    interface: {
      blocks: Array.isArray(rawBotData.interface?.blocks) ? rawBotData.interface.blocks : defaultInterface.blocks,
      defaultStartLayout: rawBotData.interface?.defaultStartLayout ?? defaultInterface.defaultStartLayout,
      defaultFirstVisitLayout: rawBotData.interface?.defaultFirstVisitLayout ?? defaultInterface.defaultFirstVisitLayout,
      total_visit: typeof rawBotData.interface?.total_visit === 'number'
        ? rawBotData.interface.total_visit
        : defaultInterface.total_visit,
    },
  };
}

export async function initializeBots(payload: Payload): Promise<void> {
  try {
    log('info', '–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤...', payload);
    const { docs: bots } = await payload.find({
      collection: 'bots',
      where: { enabled: { equals: 'enabled' } },
      limit: 999,
    });
    log('info', `–ù–∞–π–¥–µ–Ω–æ ${bots.length} –±–æ—Ç–æ–≤ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.`, payload);

    for (const botData of bots) {
      const unifiedBotData = createUnifiedBotConfig(botData);
      const botConfig = new BotConfig(unifiedBotData);

      console.log('BotConfig:', JSON.stringify(botConfig, null, 2));
      await initBot(payload, botConfig);
    }
  } catch (error: any) {
    log('error', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤: ${error.message}`, payload);
  }
}

async function initBot(payload: Payload, botConfig: BotConfig): Promise<void> {
  try {
    if (!botConfig.token) {
      log('error', `–ü—Ä–æ–ø—É—â–µ–Ω –±–æ—Ç "${botConfig.name}": –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω.`, payload);
      return;
    }
    const bot = new TelegramBot<BotContext>(botConfig.token);

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware —Å–µ—Å—Å–∏–∏ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–≤—É—Ö —Ç–∏–ø–æ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
    bot.use(
      session<SessionData, BotContext>({
        initial: (): SessionData => ({
          previousMessages: [] as number[],
          stateStack: [] as any[],
          previousState: undefined,
          isBanned: false,
        }),
      })
    );

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–±–∞–Ω).
    bot.use(bannedClientHook(payload));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    bot.command('start', async (ctx) => {
      try {
        log('info', `–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}.`, payload);
        const telegramId = ctx.from?.id;
        if (!telegramId) {
          await ctx.reply('–û—à–∏–±–∫–∞: Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
          return;
        }
        const client = await processClient(payload, telegramId, botConfig.id, {
          first_name: ctx.from?.first_name,
          last_name: ctx.from?.last_name,
          username: ctx.from?.username,
        });
        ctx.session.isBanned = client.isBanned;
        if (!client.isBanned) {
          const layoutAlias = client.total_visit === 1
            ? botConfig.interface.defaultFirstVisitLayout
            : botConfig.interface.defaultStartLayout;
          log('info', `–í—ã–±—Ä–∞–Ω layoutAlias: ${layoutAlias} (client.total_visit=${client.total_visit})`, payload);
          if (layoutAlias) {
            const layoutBlock = botConfig.interface.blocks.find((block: any) => block.alias === layoutAlias);
            if (layoutBlock) {
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
              ctx.session.previousState = layoutBlock;
              await sendLayoutBlock(ctx, botConfig, payload, layoutAlias);
            } else {
              await ctx.reply(`–û—à–∏–±–∫–∞: –õ–µ–π–∞—É—Ç —Å alias "${layoutAlias}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            }
          } else {
            await ctx.reply('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å layout alias.');
          }
        } else {
          await ctx.reply('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.');
        }
      } catch (error: any) {
        log('error', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start: ${error.message}`, payload);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback‚Äë–∑–∞–ø—Ä–æ—Å–æ–≤
    bot.on('callback_query:data', async (ctx) => {
      if (!ctx.callbackQuery || !ctx.callbackQuery.data) return;
      try {
        const data = ctx.callbackQuery.data;
        const parts = data.split('|');
        const cbType = parts[0]?.trim() ?? '';
        const callbackAlias = parts[1]?.trim() ?? '';

        // –ï—Å–ª–∏ callback —Ç–∏–ø–∞ "layout" –∏ alias —Ä–∞–≤–µ–Ω "go_back_state", –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ goBackState
        if (cbType === 'layout' && callbackAlias === 'go_back_state') {
          await goBackState(ctx, payload, botConfig);
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º
        else if (cbType === 'catalogCategory' || cbType === 'catalogLoadMore') {
          await handleCatalogEvent(cbType, callbackAlias, '', ctx, payload);
          log('info', `Callback "${cbType}|${callbackAlias}" –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ handleCatalogEvent.`, payload);
        }
        else {
          switch (cbType) {
            case 'layout': {
              const layoutBlock = botConfig.interface.blocks.find((block: any) => block.alias === callbackAlias);
              if (layoutBlock) {
                ctx.session.previousState = layoutBlock;
                await sendLayoutBlock(ctx, botConfig, payload, callbackAlias);
              } else {
                await ctx.reply(`–û—à–∏–±–∫–∞: –õ–µ–π–∞—É—Ç —Å alias "${callbackAlias}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
              }
              break;
            }
            case 'message': {
              await processMessageBlock(ctx, { message: callbackAlias });
              log('info', `MessageBlock "${callbackAlias}" —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.`, payload);
              break;
            }
            case 'command': {
              if (callbackAlias === 'go_back_state') {
                await goBackState(ctx, payload, botConfig);
              } else {
                await ctx.reply(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${callbackAlias}`);
              }
              break;
            }
            default: {
              await ctx.reply(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø callback: ${cbType}`);
            }
          }
        }
        await ctx.answerCallbackQuery();
      } catch (error: any) {
        log('error', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_query: ${error.message}`, payload);
      }
    });

    bot.start();
    log('info', `ü§ñ –ë–æ—Ç "${botConfig.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.`, payload);

    await payload.update({
      collection: 'bots',
      id: botConfig.id,
      data: {
        initialization_status: 'Initialized',
        last_initialized: new Date().toISOString(),
      },
    });
  } catch (error: any) {
    log('error', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ "${botConfig.name}": ${error.message}`, payload);
    await payload.update({
      collection: 'bots',
      id: botConfig.id,
      data: { initialization_status: 'Error' },
    });
  }
}
