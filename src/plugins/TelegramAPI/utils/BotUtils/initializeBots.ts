// üìå –ü—É—Ç—å: src/plugins/TelegramAPI/utils/BotUtils/initializeBots.ts
// üìå –í–µ—Ä—Å–∏—è: 1.2.0
//
// [CHANGELOG]
// - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω bannedClientHook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞.
// - –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π sendLayoutBlock –∏ handleCatalogEvent.
// - –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.

import type { Payload } from 'payload';
import { Bot as TelegramBot } from 'grammy';
import { session, Context, SessionFlavor } from 'grammy';
import { handleCatalogEvent } from '@/plugins/TelegramAPI/utils/BlockUtils/CatalogBlock/CatalogEventHandlers';
import { sendLayoutBlock } from '@/plugins/TelegramAPI/utils/BlockUtils/LayoutBlock/LayoutBlock'; // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–µ–π–∞—É—Ç–æ–≤
import { bannedClientHook } from '@/plugins/TelegramAPI/utils/ClientUtils/bannedClient'; // –•—É–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
import { log } from '@/plugins/TelegramAPI/utils/SystemUtils/Logger';

export interface SessionData {
  previousMessages: number[];
}

export type BotContext = Context & SessionFlavor<SessionData>;

export async function initializeBots(payload: Payload): Promise<void> {
  try {
    log('info', '–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤...', payload);
    const { docs: bots } = await payload.find({
      collection: 'bots',
      where: { enabled: { equals: 'enabled' } },
      limit: 999,
    });

    log('info', `–ù–∞–π–¥–µ–Ω–æ ${bots.length} –±–æ—Ç–æ–≤ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.`, payload);

    for (const botData of bots) {
      await initBot(payload, botData);
    }
  } catch (error: any) {
    log('error', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤: ${error.message}`, payload);
  }
}

async function initBot(payload: Payload, botData: any): Promise<void> {
  try {
    if (!botData.token) {
      log('error', `–ü—Ä–æ–ø—É—â–µ–Ω –±–æ—Ç "${botData.name}": –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω.`, payload);
      return;
    }

    const bot = new TelegramBot<BotContext>(botData.token);

    bot.use(
      session<SessionData, BotContext>({
        initial: () => ({ previousMessages: [] }),
      }),
    );

    // –•—É–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    bot.use(bannedClientHook(payload));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    bot.command('start', async (ctx) => {
      try {
        log('info', `–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}.`, payload);

        const telegramId = ctx.from?.id;
        if (!telegramId) {
          await ctx.reply('–û—à–∏–±–∫–∞: Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
          return;
        }

        const numericBotId: number = botData.id;

        const firstVisitAlias = botData.interface?.defaultFirstVisitLayout || 'start_first_visit';
        const startAlias = botData.interface?.defaultStartLayout || 'start';
        const layoutAlias = botData.interface?.total_visit === 1 ? firstVisitAlias : startAlias;

        log('info', `–í—ã–±—Ä–∞–Ω layoutAlias: ${layoutAlias}`, payload);

        const layoutBlock = botData.interface?.blocks?.find(
          (block: any) => block.alias === layoutAlias,
        );

        if (!layoutBlock) {
          await ctx.reply(`–û—à–∏–±–∫–∞: Layout "${layoutAlias}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
          return;
        }

        await sendLayoutBlock(ctx, layoutBlock, payload);
      } catch (error: any) {
        log('error', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start: ${error.message}`, payload);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
    bot.on('callback_query:data', async (ctx) => {
      try {
        const data = ctx.callbackQuery?.data;
        if (!data) {
          await ctx.reply('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ callback –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
          return;
        }

        const [cbType, callbackAlias] = data.split('|');
        if (!cbType || !callbackAlias) {
          await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback.');
          return;
        }

        switch (cbType) {
          case 'layout': {
            const layoutBlock = botData.interface?.blocks?.find(
              (block: any) => block.alias === callbackAlias,
            );
            if (!layoutBlock) {
              await ctx.reply(`–õ–µ–π–∞—É—Ç —Å alias "${callbackAlias}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
              return;
            }
            await sendLayoutBlock(ctx, layoutBlock, payload);
            break;
          }
          default:
            await handleCatalogEvent(cbType, callbackAlias, '', ctx, payload);
        }

        await ctx.answerCallbackQuery();
        log('info', `Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${cbType}|${callbackAlias}`, payload);
      } catch (error: any) {
        log('error', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_query: ${error.message}`, payload);
      }
    });

    bot.start();
    log('info', `ü§ñ –ë–æ—Ç "${botData.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.`, payload);

    await payload.update({
      collection: 'bots',
      id: botData.id,
      data: {
        initialization_status: 'Initialized',
        last_initialized: new Date().toISOString(),
      },
    });
  } catch (error: any) {
    log('error', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ "${botData.name}": ${error.message}`, payload);
    await payload.update({
      collection: 'bots',
      id: botData.id,
      data: { initialization_status: 'Error' },
    });
  }
}
