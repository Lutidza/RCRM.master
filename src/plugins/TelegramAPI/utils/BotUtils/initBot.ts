// Path: src/plugins/TelegramAPI/utils/BotUtils/initBot.ts
// Version: 1.0.0-refactored
// –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∫–æ–¥–µ:
// - –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é initBot, –∫–æ—Ç–æ—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç (–∑–∞–ø—É—Å–∫–∞–µ—Ç) –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞.
// - –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç middlewares, –∫–æ–º–∞–Ω–¥—ã –∏ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.
// - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è initBot –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–æ–≤.

import type { Payload } from 'payload';
import { Bot as TelegramBot } from 'grammy';
import { setupMiddlewares } from '@/plugins/TelegramAPI/utils/BotUtils/setupMiddlewares';
import { setupCommands, buildAllowedCommands } from '@/plugins/TelegramAPI/utils/BotUtils/setupCommands';
import { setupCallbacks } from '@/plugins/TelegramAPI/utils/BotUtils/setupCallbacks';
import { log } from '@/plugins/TelegramAPI/utils/SystemUtils/Logger';
import { BotConfig } from '@/plugins/TelegramAPI/utils/BotUtils/BotConfig';

import type { BotContext } from '@/plugins/TelegramAPI/types/TelegramBlocksTypes';

/**
 * –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–∑–∞–ø—É—Å–∫–∞) –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞.
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç middlewares, –∫–æ–º–∞–Ω–¥—ã, callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.
 */
export async function initBot(payload: Payload, botConfig: BotConfig): Promise<void> {
  try {
    if (!botConfig.token) {
      log('error', `–ü—Ä–æ–ø—É—â–µ–Ω –±–æ—Ç "${botConfig.name}": –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω.`, payload);
      return;
    }
    const bot = new TelegramBot<BotContext>(botConfig.token);
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middlewares
    setupMiddlewares(bot, botConfig, payload);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–æ–º–∞–Ω–¥
    botConfig.allowedCommands = buildAllowedCommands(botConfig);
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setupCommands(bot, botConfig, payload);
    setupCallbacks(bot, botConfig, payload);

    if (botConfig.description) {
      try {
        await bot.api.setMyDescription(botConfig.description);
        log('info', '–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.', payload);
      } catch (error: any) {
        log('error', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞: ${error.message}`, payload);
      }
    }
    bot.start();
    log('info', `ü§ñ –ë–æ—Ç "${botConfig.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.`, payload);
    await payload.update({
      collection: 'bots',
      id: botConfig.id,
      data: {
        initialization_status: 'Initialized',
        last_initialized: new Date().toISOString(),
      },
    });
  } catch (error: any) {
    log('error', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ "${botConfig.name}": ${error.message}`, payload);
    await payload.update({
      collection: 'bots',
      id: botConfig.id,
      data: { initialization_status: 'Error' },
    });
  }
}
