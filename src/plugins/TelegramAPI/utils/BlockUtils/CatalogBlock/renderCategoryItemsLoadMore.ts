// üìå –ü—É—Ç—å: src/plugins/TelegramAPI/utils/BlockUtils/CatalogBlock/renderCategoryItemsLoadMore.ts
// üìå –í–µ—Ä—Å–∏—è: 1.0.37
//
// [CHANGELOG]
// - –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ log –≤–º–µ—Å—Ç–æ console.log.
// - –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º log.
// - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–∞ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞.

import type { Payload } from 'payload';
import { InlineKeyboard } from 'grammy';
import {
  BotContext,
  storeMessageId,
} from '@/plugins/TelegramAPI/utils/SystemUtils/clearPreviousMessages';
import { log } from '@/plugins/TelegramAPI/utils/SystemUtils/Logger';

const DEMO_PRODUCT_IMAGE_URL = "https://kvartiry-tbilisi.ru/images/demo/product_banner.png";

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
 * @param {BotContext} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞.
 * @param {string} categoryId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
 * @param {Payload} payload - –≠–∫–∑–µ–º–ø–ª—è—Ä Payload CMS.
 * @param {number} page - –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
 * @param {number} [itemsPerPage=3] - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
 * @returns {Promise<void>}
 */
export async function renderCategoryItemsLoadMore(
  ctx: BotContext,
  categoryId: string,
  payload: Payload,
  page: number,
  itemsPerPage: number = 3
): Promise<void> {
  try {
    log('info', `–ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}, itemsPerPage=${itemsPerPage}`, payload);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const productsResult = await payload.find({
      collection: 'products',
      where: { category_ids: { in: [categoryId] } },
      sort: 'name',
      limit: 999,
    });

    const products = productsResult.docs;
    const totalPages = Math.ceil(products.length / itemsPerPage);
    const currentProducts = products.slice((page - 1) * itemsPerPage, page * itemsPerPage);

    if (currentProducts.length === 0) {
      const noMoreMsg = await ctx.reply("–ù–µ—Ç –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤.", { parse_mode: 'HTML' });
      storeMessageId(ctx, noMoreMsg.message_id);
      log('info', `–¢–æ–≤–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}`, payload);
      return;
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
    for (const prod of currentProducts) {
      if (!prod.id) {
        log('error', `–ü—Ä–æ–ø—É—â–µ–Ω –ø—Ä–æ–¥—É–∫—Ç –±–µ–∑ ID: ${JSON.stringify(prod)}`, payload);
        continue;
      }

      const productKeyboard = new InlineKeyboard()
        .text("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", `catalogProductDetails|${prod.id}`)
        .text("–ö—É–ø–∏—Ç—å", `catalogBuyNow|${prod.id}`);

      const productMsg = await ctx.replyWithPhoto(DEMO_PRODUCT_IMAGE_URL, {
        caption: `<b>${prod.name}</b>\n<b>–¶–µ–Ω–∞:</b> ${prod.price ? `$${prod.price}` : 'N/A'}\n<b>–°—Ç–∞—Ç—É—Å:</b> ${prod.status ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`,
        parse_mode: 'HTML',
        reply_markup: productKeyboard,
      });
      storeMessageId(ctx, productMsg.message_id);
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë"
    if (page < totalPages) {
      const nextPage = page + 1;
      const navKeyboard = new InlineKeyboard()
        .text("–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë", `catalogLoadMore|${categoryId}|${nextPage}|${itemsPerPage}`);

      const navMsg = await ctx.reply(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages}`, {
        parse_mode: 'HTML',
        reply_markup: navKeyboard,
      });
      storeMessageId(ctx, navMsg.message_id);
    }
  } catch (error: any) {
    log('error', `–û—à–∏–±–∫–∞ –≤ renderCategoryItemsLoadMore: ${error.message}`, payload);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤.");
  }
}
