// üìå –ü—É—Ç—å: src/plugins/TelegramAPI/utils/BlockUtils/CatalogBlock/renderCategoryItems.ts
// üìå –í–µ—Ä—Å–∏—è: 1.4.7
//
// [CHANGELOG]
// - –î–æ–±–∞–≤–ª–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –±–ª–æ–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏) –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤.
// - –£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π.

import type { Payload } from 'payload';
import type { BotContext } from '@/plugins/TelegramAPI/utils/SystemUtils/clearPreviousMessages';
import { clearPreviousMessages, storeMessageId } from '@/plugins/TelegramAPI/utils/SystemUtils/clearPreviousMessages';
import { InlineKeyboard } from 'grammy';
import { paginateCategoryItems } from './paginateCategoryItems';
import { log } from '@/plugins/TelegramAPI/utils/SystemUtils/Logger';

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –º–µ–¥–∏–∞
const DEFAULT_CATEGORY_MEDIA = [
  {
    url: 'https://kvartiry-tbilisi.ru/images/demo/product_banner-1.png',
  },
];
const DEFAULT_PRODUCT_MEDIA = [
  {
    url: 'https://kvartiry-tbilisi.ru/images/demo/product_banner-1.png',
  },
];

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
 * @param {BotContext} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞.
 * @param {string} categoryId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å—Ç—Ä–æ–∫–∞, –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–∑ Telegram callback).
 * @param {PaginationOptions} paginationOptions - –û–ø—Ü–∏–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
 * @param {Payload} payload - –≠–∫–∑–µ–º–ø–ª—è—Ä Payload CMS.
 * @param {boolean} clearMessages - –£–¥–∞–ª—è—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º.
 * @returns {Promise<void>}
 */
export async function renderCategoryItems(
  ctx: BotContext,
  categoryId: string,
  paginationOptions: { page: number; itemsPerPage: number },
  payload: Payload,
  clearMessages: boolean = true // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
): Promise<void> {
  try {
    if (!ctx.chat) {
      log('error', '–ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.', payload);
      return;
    }

    const parsedCategoryId = parseInt(categoryId, 10);
    if (isNaN(parsedCategoryId)) {
      log('error', `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: "${categoryId}".`, payload);
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
      return;
    }

    const { page, itemsPerPage } = paginationOptions;

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (clearMessages) {
      await clearPreviousMessages(ctx);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const category = await payload.findByID({
      collection: 'product-categories',
      id: categoryId,
    });

    if (!category) {
      log('error', `–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID "${categoryId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`, payload);
      const msg = await ctx.reply('–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      storeMessageId(ctx, msg.message_id);
      return;
    }

    const categoryMedia = Array.isArray(category.media) && category.media.length > 0
      ? category.media
      : DEFAULT_CATEGORY_MEDIA;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryCaption = `<b>${category.name}</b>\n${category.description || ''}`;
    const categoryMsg = await ctx.replyWithPhoto(categoryMedia[0].url, {
      caption: categoryCaption,
      parse_mode: 'HTML',
    });
    storeMessageId(ctx, categoryMsg.message_id);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const categories = await paginateCategoryItems(
      payload,
      'product-categories',
      { parent_id: { equals: parsedCategoryId } },
      page,
      itemsPerPage,
    );

    const products = await paginateCategoryItems(
      payload,
      'products',
      { category_ids: { in: [parsedCategoryId] } },
      page,
      itemsPerPage,
    );

    // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞ (–Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤)
    if (categories.length === 0 && products.length === 0) {
      const emptyMessage = await ctx.reply('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
      storeMessageId(ctx, emptyMessage.message_id);
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (categories.length > 0) {
      const categoryKeyboard = new InlineKeyboard();
      categories.forEach((cat: any, index: number) => {
        categoryKeyboard.text(cat.name, `catalogCategory|${cat.id}`);
        if ((index + 1) % 2 === 0) categoryKeyboard.row();
      });

      const subCategoryMsg = await ctx.reply('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', {
        reply_markup: categoryKeyboard,
      });
      storeMessageId(ctx, subCategoryMsg.message_id);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    if (products.length > 0) {
      for (const product of products) {
        const productMedia = Array.isArray(product.media) && product.media.length > 0
          ? product.media
          : DEFAULT_PRODUCT_MEDIA;

        const productCaption = `<b>${product.name}</b>\n<b>–¶–µ–Ω–∞:</b> ${
          product.price ? `$${product.price}` : 'N/A'
        }\n<b>–°—Ç–∞—Ç—É—Å:</b> ${product.status ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`;

        const productKeyboard = new InlineKeyboard()
          .text('Details', `catalogProductDetails|${product.id}`)
          .text('Buy Now', `catalogBuyNow|${product.id}`);

        const productMsg = await ctx.replyWithPhoto(productMedia[0].url, {
          caption: productCaption,
          parse_mode: 'HTML',
          reply_markup: productKeyboard,
        });

        storeMessageId(ctx, productMsg.message_id);
      }
    }

    log('info', `–≠–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è ID: ${categoryId}.`, payload);
  } catch (error: any) {
    log('error', `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${error.message}`, payload);
    const errorMsg = await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
    storeMessageId(ctx, errorMsg.message_id);
  }
}
