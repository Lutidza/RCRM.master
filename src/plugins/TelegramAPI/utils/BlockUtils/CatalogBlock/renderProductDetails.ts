// Path: src/plugins/TelegramAPI/utils/BlockUtils/CatalogBlock/renderProductDetails.ts
// Version: 1.1.0-clearAll
//
// [CHANGELOG]
// - –ü–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º clearPreviousMessages(ctx),
//   —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
// - –î–∞–ª–µ–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º "–ø–æ–¥—Ä–æ–±–Ω—É—é" –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ (—Å –±–æ–ª–µ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π).
// - –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ç–æ, —Å—Ç–∞—Ç—É—Å–∞, –ª–µ–π–±–ª–æ–≤ –∏ —Ç.–¥.

import type { Payload } from 'payload';
import { InlineKeyboard } from 'grammy';
import type { BotContext } from '@/plugins/TelegramAPI/types/TelegramBlocksTypes';
import { clearPreviousMessages, storeMessageId } from '@/plugins/TelegramAPI/utils/SystemUtils/clearPreviousMessages';
import { log } from '@/plugins/TelegramAPI/utils/SystemUtils/Logger';

const DEMO_IMAGE_URL = "https://kvartiry-tbilisi.ru/images/demo/product_banner.png";

export async function renderProductDetails(
  ctx: BotContext,
  productId: string | number,
  payload: Payload
): Promise<void> {
  try {
    if (!ctx.chat) {
      log('error', 'renderProductDetails: –Ω–µ—Ç ctx.chat', payload);
      return;
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await clearPreviousMessages(ctx);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä
    const result = await payload.find({
      collection: 'products',
      where: { id: { equals: productId } },
      limit: 1,
    });
    const product = result.docs[0];
    if (!product) {
      const notFoundMsg = await ctx.reply("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      storeMessageId(ctx, notFoundMsg.message_id);
      return;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è
    const { name, price, size, status, images, description, labels_ids } = product as any;
    const statusText = status?.label ?? status?.alias ?? 'N/A';

    // –õ–µ–π–±–ª—ã
    let labelsText = '';
    if (Array.isArray(labels_ids) && labels_ids.length > 0) {
      labelsText = labels_ids.map((lbl: any) => lbl.label ?? lbl.alias).join(' ');
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    // –ü—Ä–∏–º–µ—Ä:
    // <b>Juicy Pear ‚Äî ‚ë†</b>   üî•HIT
    // <i>Price:</i> $33
    // <b>Status:</b> ‚úÖ In stock
    // <b>Description:</b> ...
    // ...
    let detailsText = `<b>${name} ‚Äî ${size}</b>`;
    if (labelsText) detailsText += `   ${labelsText}`;
    detailsText += `\n<i>Price:</i> $${price}\n`;
    detailsText += `<b>Status:</b> ${statusText}\n`;
    if (description) {
      detailsText += `<b>Description:</b>\n${description}\n`;
    }

    const photoUrl = (Array.isArray(images) && images[0]?.url?.startsWith('http'))
      ? images[0].url
      : DEMO_IMAGE_URL;

    // –ö–Ω–æ–ø–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: "–í –∫–æ—Ä–∑–∏–Ω—É", "Back", "–ó–∞–∫–∞–∑–∞—Ç—å"
    const keyboard = new InlineKeyboard()
      .text("–í –∫–æ—Ä–∑–∏–Ω—É", `addToCart|${product.id}`)
      .text("–ó–∞–∫–∞–∑–∞—Ç—å", `order|${product.id}`)
      .row()
      .text("Back", `layout|store_home_page`); // –∏–ª–∏ –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞

    const msg = await ctx.replyWithPhoto(photoUrl, {
      caption: detailsText,
      parse_mode: 'HTML',
      reply_markup: keyboard,
    });
    storeMessageId(ctx, msg.message_id);

    log('info', `renderProductDetails: —Ç–æ–≤–∞—Ä ID=${product.id} (–¥–µ—Ç–∞–ª—å–Ω–æ)`, payload);

  } catch (err: any) {
    log('error', `renderProductDetails: –û—à–∏–±–∫–∞: ${err.message}`, payload);
    const errorMsg = await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞.');
    storeMessageId(ctx, errorMsg.message_id);
  }
}
