// Path: src/plugins/TelegramAPI/utils/BlockUtils/CatalogBlock/renderProductSnippet.ts
// Version: 1.1.0-with-discount
//
// [CHANGELOG]
// 1. –î–æ–±–∞–≤–ª–µ–Ω mapSizeToIcon(size): –µ—Å–ª–∏ 1..20 -> —Å–∏–º–≤–æ–ª "‚ë†...‚ë≥", –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º–æ —á–∏—Å–ª–æ.
// 2. –£–±—Ä–∞–Ω—ã –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–≥–∏ (<blockquote> –∏ —Ç. –¥.), –Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ—Å—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–ø—Ä–æ–±–µ–ª—ã, –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫).
// 3. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –∏–º–µ–µ—Ç images (media) –Ω–µ –ø—É—Å—Ç–æ–µ -> –ø–æ–∫–∞–∑—ã–≤–∞–µ–º DEMO_IMAGE_URL, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ.
// 4. –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —Å–∫–∏–¥–∫–∏: –µ—Å–ª–∏ discount.enabled='enabled' –∏ (now –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [start_date..end_date]),
//    —Ç–æ –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É. –í—ã–≤–æ–¥–∏–º Old Price –∏ New Price.
//
// –ü—Ä–∏–º–µ—Ä –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—É—á–∏—Ç—ã–≤–∞—è spacing –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã):
//
//  <b>Juicy Pear ‚Äî ‚ë° | üî•HOT</b>
//  <b>Price:</b> $29
//  ‚úÖ Available
//
// –ï—Å–ª–∏ —Å–∫–∏–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞:
//  <b>Old Price:</b> $29
//  <b>New Price:</b> $26.10
//
// ---------------------------------------------------------------------

import type { Payload } from 'payload';
import { InlineKeyboard } from 'grammy';
import type { BotContext } from '@/plugins/TelegramAPI/types/TelegramBlocksTypes';
import { storeMessageId } from '@/plugins/TelegramAPI/utils/SystemUtils/clearPreviousMessages';
import { log } from '@/plugins/TelegramAPI/utils/SystemUtils/Logger';

const DEMO_IMAGE_URL = "https://kvartiry-tbilisi.ru/images/demo/product_banner-7.png";

/**
 * –ú–∞–ø–ø–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–æ–≤ 1..20 –≤ —Å–∏–º–≤–æ–ª—ã ‚ë†..‚ë≥, –µ—Å–ª–∏ >20 -> –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º–æ —á–∏—Å–ª–æ.
 */
function mapSizeToIcon(size: number): string {
  const icons = [
    '‚ë†','‚ë°','‚ë¢','‚ë£','‚ë§','‚ë•','‚ë¶','‚ëß','‚ë®','‚ë©',
    '‚ë™','‚ë´','‚ë¨','‚ë≠','‚ëÆ','‚ëØ','‚ë∞','‚ë±','‚ë≤','‚ë≥',
  ];
  if (size >= 1 && size <= 20) {
    // –¥–æ–±–∞–≤–ª—è–µ–º ! –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã —Å–∫–∞–∑–∞—Ç—å TS, —á—Ç–æ —Ç—É—Ç –Ω–µ –±—É–¥–µ—Ç undefined
    return icons[size - 1]!;
  }
  return size.toString();
}

export async function renderProductSnippet(
  ctx: BotContext,
  productId: string | number,
  payload: Payload
): Promise<number | null> {
  try {
    if (!ctx.chat) {
      log('error', 'renderProductSnippet: –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.', payload);
      return null;
    }

    // 1) –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä
    const productResult = await payload.find({
      collection: 'products',
      where: { id: { equals: productId } },
      limit: 1,
    });
    const product = productResult.docs[0];
    if (!product) {
      const notFoundMsg = await ctx.reply("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      storeMessageId(ctx, notFoundMsg.message_id);
      return notFoundMsg.message_id;
    }

    const {
      name,
      price,
      size,
      status,
      labels_ids,
      images,
      discount, // relationship (–º–æ–∂–µ—Ç –±—ã—Ç—å undefined –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º { id: number } –±–µ–∑ depth)
    } = product as any;

    // 2) –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Å–∫–∏–¥–∫–∏
    let finalPrice = price;
    let discountActive = false;
    let discountText = ''; // —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç "Old Price / New Price" –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

    if (discount && discount.id) {
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç —Å–∫–∏–¥–∫–∏
      const discountResult = await payload.find({
        collection: 'discounts',
        where: { id: { equals: discount.id } },
        limit: 1,
      });
      const discountDoc = discountResult.docs[0];
      if (discountDoc) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º enabled, –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ / –∫–æ–Ω—Ü–∞
        if (discountDoc.enabled === 'enabled') {
          const now = new Date();
          const startDate = discountDoc.start_date ? new Date(discountDoc.start_date) : null;
          const endDate = discountDoc.end_date ? new Date(discountDoc.end_date) : null;

          if (
            startDate && endDate &&
            now >= startDate && now <= endDate
          ) {
            // –°–∫–∏–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
            discountActive = true;
            // –°—á–∏—Ç–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
            if (discountDoc.discount_percentage) {
              finalPrice = finalPrice * (1 - discountDoc.discount_percentage / 100);
            }
            if (discountDoc.discount_fixed_amount) {
              finalPrice = finalPrice - discountDoc.discount_fixed_amount;
            }
            if (finalPrice < 0) {
              finalPrice = 0; // –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–Ω
            }

            discountText =
              `\n<b>Old Price:</b> $${price}\n` +
              `<b>New Price:</b> $${finalPrice.toFixed(2)}`;
          }
        }
      }
    }

    // 3) –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–Ω–∏–ø–ø–µ—Ç–∞

    // –õ–µ–π–±–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    let labelsText = '';
    if (Array.isArray(labels_ids) && labels_ids.length > 0) {
      const labelArr = labels_ids.map((lbl: any) => lbl.label ?? lbl.alias ?? '');
      labelsText = labelArr.join(' ');
    }

    // –°—Ç–∞—Ç—É—Å
    let statusText = 'N/A';
    if (typeof status === 'object' && (status.label || status.alias)) {
      statusText = status.label ?? status.alias ?? 'N/A';
    } else if (typeof status === 'number') {
      // –ë–µ–∑ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ depth –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ —á–∏—Å–ª–æ
      statusText = `[#${status}]`;
    }

    // –ú–∞–ø–ø–∏–Ω–≥ size -> –∏–∫–æ–Ω–∫–∞
    const sizeIcon = mapSizeToIcon(size);

    // –°–æ–±–∏—Ä–∞–µ–º HTML (—É—á–∏—Ç—ã–≤–∞—è –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã)
    // –ü—Ä–∏–º–µ—Ä:
    // <b>Juicy Pear ‚Äî ‚ë° | üî•HOT</b>
    // <b>Price:</b> $29
    // ‚úÖ In stock
    // –ï—Å–ª–∏ —Å–∫–∏–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: –¥–æ–±–∞–≤–ª—è–µ–º Old Price / New Price
    let snippetText = `<b>${name} ‚Äî ${sizeIcon}`;
    if (labelsText) {
      snippetText += ` | ${labelsText}`;
    }
    snippetText += `</b>\n`;
    snippetText += `<b>Price:</b> $${price}\n`;
    snippetText += `‚úÖ ${statusText}`;

    if (discountActive && discountText) {
      snippetText += discountText; // –¥–æ–±–∞–≤–ª—è–µ–º Old Price / New Price
    }

    // 4) –ö–Ω–æ–ø–∫–∏
    const inlineKeyboard = new InlineKeyboard()
      .text("–ü–æ–¥—Ä–æ–±–Ω–æ", `productDetails|${product.id}`)
      .text("–ó–∞–∫–∞–∑–∞—Ç—å", `order|${product.id}`);

    // 5) –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏:
    const hasMedia = Array.isArray(images) && images.length > 0;
    let msgId: number;
    if (hasMedia) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DEMO_IMAGE_URL
      const photoMsg = await ctx.replyWithPhoto(DEMO_IMAGE_URL, {
        caption: snippetText,
        parse_mode: 'HTML',
        reply_markup: inlineKeyboard,
      });
      msgId = photoMsg.message_id;
    } else {
      // –ë–µ–∑ —Ñ–æ—Ç–æ, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
      const textMsg = await ctx.reply(snippetText, {
        parse_mode: 'HTML',
        reply_markup: inlineKeyboard,
      });
      msgId = textMsg.message_id;
    }

    storeMessageId(ctx, msgId);
    log('info', `renderProductSnippet: –¢–æ–≤–∞—Ä ID=${productId} (–∫–æ—Ä–æ—Ç–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`, payload);
    return msgId;

  } catch (error: any) {
    log('error', `renderProductSnippet: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–Ω–∏–ø–ø–µ—Ç–∞: ${error.message}`, payload);
    const errMsg = await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.");
    storeMessageId(ctx, errMsg.message_id);
    return null;
  }
}
