// üìå –§–∞–π–ª: src/plugins/TelegramAPI/utils/BlockUtils/CatalogBlock/index.ts
// üìå –í–µ—Ä—Å–∏—è: 1.0.0
//
// –§—É–Ω–∫—Ü–∏—è renderCatalogBlock –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –±–ª–æ–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram-–±–æ—Ç–∞.
// –û–Ω–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "product-categories" —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–ª–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)
// –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≥–¥–µ –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é.
// Callback data –∫–Ω–æ–ø–∫–∏ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç "catalogCategory|<categoryId>".
// –í –±—É–¥—É—â–µ–º –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å, –¥–æ–±–∞–≤–∏–≤ –≤—ã–≤–æ–¥ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤.

import type { Payload } from 'payload';
import { InlineKeyboard } from 'grammy';
import type { Context, SessionFlavor } from 'grammy';

interface SessionData {
  previousMessages: number[];
}

type BotContext = Context & SessionFlavor<SessionData>;

/**
 * renderCatalogBlock - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –±–ª–æ–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞.
 *
 * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞ (BotContext), —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –∏ —á–∞—Ç–µ.
 * @param blockData - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫–∞ CatalogBlock, –∑–∞–¥–∞–Ω–Ω—ã–µ –≤ –∞–¥–º–∏–Ω–∫–µ (–≤–∫–ª—é—á–∞—é—Ç alias, locationFilter, categoryFilter –∏ —Ç.–¥.).
 * @param payload - –≠–∫–∑–µ–º–ø–ª—è—Ä Payload CMS –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º.
 *
 * –õ–æ–≥–∏–∫–∞:
 * 1. –ï—Å–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–ª–æ–∫–∞ –∑–∞–¥–∞–Ω categoryFilter (–º–∞—Å—Å–∏–≤ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π), –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
 *    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äì –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ–ø-—É—Ä–æ–≤–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≥–¥–µ parent_id —Ä–∞–≤–µ–Ω null).
 * 2. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "product-categories" —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º.
 * 3. –§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ callback_data –≤–∏–¥–∞ "catalogCategory|<categoryId>".
 * 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
 */
export async function renderCatalogBlock(
  ctx: BotContext,
  blockData: any,
  payload: Payload
): Promise<void> {
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    let whereClause: any = {};

    if (blockData.categoryFilter && Array.isArray(blockData.categoryFilter) && blockData.categoryFilter.length > 0) {
      // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      whereClause.id = { in: blockData.categoryFilter };
    } else {
      // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –Ω–µ –∑–∞–¥–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-—É—Ä–æ–≤–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
      whereClause.parent_id = { equals: null };
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "product-categories"
    const categoriesResult = await payload.find({
      collection: 'product-categories',
      where: whereClause,
      sort: 'name',
      limit: 999,
    });
    const categories = categoriesResult.docs;

    // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!categories || categories.length === 0) {
      await ctx.reply("No categories found.");
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const keyboard = new InlineKeyboard();
    categories.forEach((category: any, index: number) => {
      // –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç callback_data "catalogCategory|<categoryId>"
      keyboard.text(category.name, `catalogCategory|${category.id}`);
      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫ –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
      if ((index + 1) % 2 === 0) {
        keyboard.row();
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    await ctx.reply("Please choose a category:", {
      reply_markup: keyboard,
      parse_mode: 'HTML',
    });
  } catch (error: any) {
    console.error("Error rendering catalog block:", error);
    await ctx.reply("An error occurred while loading the catalog.", { parse_mode: 'HTML' });
  }
}
