// Path: src/plugins/TelegramAPI/utils/BlockUtils/CatalogBlock/renderCategoryLayout.ts
// Version: 1.3.0-use-snippet
//
// [CHANGELOG]
// - –í–º–µ—Å—Ç–æ renderProductCard, —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º renderProductSnippet,
//   –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —É–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å DEMO_IMAGE_URL,
//   –µ—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –ø—É—Å—Ç–æ–π / –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π images[0]?.url.
//
// - –õ–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –ø—Ä–µ–∂–Ω–µ–π: –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏,
//   –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (snippet) –∏ –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

import type { Payload } from 'payload';
import { InlineKeyboard } from 'grammy';
import { storeMessageId } from '@/plugins/TelegramAPI/utils/SystemUtils/clearPreviousMessages';
import { log } from '@/plugins/TelegramAPI/utils/SystemUtils/Logger';
import { paginateCategoryItems } from './paginateCategoryItems';
// –í–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ renderProductCard –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º snippet:
import { renderProductSnippet } from './renderProductSnippet';
import type { BotContext } from '@/plugins/TelegramAPI/types/TelegramBlocksTypes';

export async function renderCategoryLayout(
  ctx: BotContext,
  payload: Payload,
  categoryId: number,
  page: number,
  itemsPerPage: number,
): Promise<void> {
  try {
    if (!ctx.chat) return;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã (–µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)
    if (!ctx.session.categoryLayoutMessages) ctx.session.categoryLayoutMessages = [];
    if (!ctx.session.categoryPageMessages) ctx.session.categoryPageMessages = [];

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–º—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const category = await payload.findByID({
      collection: 'product-categories',
      id: categoryId,
    });
    if (!category) {
      const msg = await ctx.reply("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
      storeMessageId(ctx, msg.message_id);
      return;
    }

    // –û–±–ª–æ–∂–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const bannerUrl = Array.isArray(category.media) && category.media.length > 0
      ? category.media[0].url
      : 'https://kvartiry-tbilisi.ru/images/demo/catalog_banner-1.png';

    const catMsg = await ctx.replyWithPhoto(bannerUrl, {
      caption: `<b>${category.name}</b>\n${category.description || ''}`,
      parse_mode: 'HTML',
    });
    storeMessageId(ctx, catMsg.message_id);
    ctx.session.categoryLayoutMessages.push(catMsg.message_id);

    // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const subcatsResult = await payload.find({
      collection: 'product-categories',
      where: { parent_id: { equals: categoryId } },
      limit: 999,
    });
    const subcats = subcatsResult.docs;
    if (subcats.length > 0) {
      const subKeyboard = new InlineKeyboard();
      subcats.forEach((sc: any, idx: number) => {
        subKeyboard.text(sc.name, `catalogCategory|${sc.id}|${itemsPerPage}`);
        if ((idx + 1) % 2 === 0) subKeyboard.row();
      });
      const subMsg = await ctx.reply('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', {
        reply_markup: subKeyboard,
      });
      storeMessageId(ctx, subMsg.message_id);
      ctx.session.categoryLayoutMessages.push(subMsg.message_id);
    }

    // –¢–æ–≤–∞—Ä—ã (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    const pagination = await paginateCategoryItems(
      payload,
      'products',
      { category_ids: { in: [categoryId] } },
      page,
      itemsPerPage
    );
    const products = pagination.docs;
    const totalPages = pagination.totalPages;

    if (!products || products.length === 0) {
      const noDataMsg = await ctx.reply("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.");
      storeMessageId(ctx, noDataMsg.message_id);
      ctx.session.categoryPageMessages.push(noDataMsg.message_id);
      return;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–æ–≤–∞—Ä—ã –∫–∞–∫ —Å–Ω–∏–ø–ø–µ—Ç—ã
    for (const product of products) {
      const snippetMsgId = await renderProductSnippet(ctx, product.id, payload);
      if (snippetMsgId) {
        ctx.session.categoryPageMessages.push(snippetMsgId);
      }
    }

    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (Back, Store, Next/Home)
    const navKeyboard = new InlineKeyboard();

    // –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–±—ã—á–Ω–æ Back => layout|store_home_page (–∏–ª–∏ –∫–∞–∫ –≤–∞–º –Ω—É–∂–Ω–æ)
    navKeyboard.text("Back", "layout|store_home_page");
    navKeyboard.text("üõí Store", "layout|store_home_page");

    if (page < totalPages) {
      navKeyboard.text("Next", `catalogLoadMore|${categoryId}|${page + 1}|${itemsPerPage}`);
    } else {
      navKeyboard.text("Home", "layout|home_page");
    }

    const navMsg = await ctx.reply(`–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page} –∏–∑ ${totalPages}`, {
      parse_mode: 'HTML',
      reply_markup: navKeyboard,
    });
    storeMessageId(ctx, navMsg.message_id);
    ctx.session.categoryPageMessages.push(navMsg.message_id);

    log('info', `renderCategoryLayout: page=${page}, categoryId=${categoryId}`, payload);

  } catch (err) {
    log('error', `renderCategoryLayout: –û—à–∏–±–∫–∞: ${err}`, payload);
  }
}
