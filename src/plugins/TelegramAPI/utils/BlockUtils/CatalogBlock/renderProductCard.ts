// üìå –ü—É—Ç—å: src/plugins/TelegramAPI/utils/BlockUtils/CatalogBlock/renderProductCard.ts
// üìå –í–µ—Ä—Å–∏—è: 1.0.11
//
// [CHANGELOG]
// - –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Logger log.
// - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å product.
// - –û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –±–æ–ª—å—à–µ–π —è—Å–Ω–æ—Å—Ç–∏.

import type { Payload } from 'payload';
import { InlineKeyboard } from 'grammy';
import {
  clearPreviousMessages,
  storeMessageId,
  BotContext,
} from '@/plugins/TelegramAPI/utils/SystemUtils/clearPreviousMessages';
import { log } from '@/plugins/TelegramAPI/utils/SystemUtils/Logger';

const DEMO_IMAGE_URL = "https://kvartiry-tbilisi.ru/images/demo/product_banner.png";

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞.
 * @param {BotContext} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram –±–æ—Ç–∞.
 * @param {string} productId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞.
 * @param {Payload} payload - –≠–∫–∑–µ–º–ø–ª—è—Ä Payload CMS.
 * @returns {Promise<void>}
 */
export async function renderProductCard(
  ctx: BotContext,
  productId: string,
  payload: Payload
): Promise<void> {
  try {
    if (!ctx.chat) {
      log('error', '–ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.', payload);
      return;
    }

    await clearPreviousMessages(ctx);

    // –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞
    const result = await payload.find({
      collection: 'products',
      where: { id: { equals: productId } },
      limit: 1,
    });

    const product = result.docs[0];
    if (!product) {
      const msgNoProduct = await ctx.reply("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", { parse_mode: 'HTML' });
      storeMessageId(ctx, msgNoProduct.message_id);
      log('error', `–ü—Ä–æ–¥—É–∫—Ç —Å ID ${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`, payload);
      return;
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
    const { name, price, description, labels_ids, quantity } = product as any;
    let messageText = `<b>${name}</b>\n<b>–¶–µ–Ω–∞:</b> $${price}\n`;
    messageText += `<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> ${quantity ?? 'N/A'}\n`;
    messageText += `<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n`;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–æ–∫
    if (Array.isArray(labels_ids) && labels_ids.length > 0) {
      const labelsText = labels_ids
        .map((label: any) =>
          typeof label === 'object' && label.label ? label.label : label
        )
        .join(', ');
      messageText += `<b>–ú–µ—Ç–∫–∏:</b> ${labelsText}\n`;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    const keyboard = new InlineKeyboard()
      .text("–ù–∞–∑–∞–¥", `catalogBack|${productId}`)
      .text("–ó–∞–∫–∞–∑–∞—Ç—å", `order|${productId}`);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    const cardMsg = await ctx.replyWithPhoto(DEMO_IMAGE_URL, {
      caption: messageText,
      parse_mode: 'HTML',
      reply_markup: keyboard,
    });
    storeMessageId(ctx, cardMsg.message_id);
    log('info', `–ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ID ${productId} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.`, payload);

  } catch (error: any) {
    log('error', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: ${error.message}`, payload);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ.",
      { parse_mode: 'HTML' }
    );
  }
}
