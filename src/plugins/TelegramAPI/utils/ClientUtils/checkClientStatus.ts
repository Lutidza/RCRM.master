// üìå –ü—É—Ç—å: src/plugins/TelegramAPI/utils/ClientUtils/checkClientStatus.ts
// üìå –í–µ—Ä—Å–∏—è: 1.0.0
//
// [CHANGELOG]
// - –í—ã–Ω–µ—Å–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ `bannedClient` –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.
// - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤.

import type { Payload } from 'payload';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ alias.
 * @param payload - –≠–∫–∑–µ–º–ø–ª—è—Ä Payload CMS.
 * @param status - –ü–æ–ª–µ `status` –∫–ª–∏–µ–Ω—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º).
 * @returns {Promise<string | null>} –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç alias —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ null, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
 */
export async function checkClientStatus(
  payload: Payload,
  status: any
): Promise<string | null> {
  try {
    if (typeof status === 'object' && status !== null) {
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç alias
      if ('alias' in status && typeof status.alias === 'string') {
        return status.alias;
      }
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ –æ–±—ä–µ–∫—Ç —Å id
      if ('id' in status) {
        const statusResult = await payload.find({
          collection: 'statuses',
          where: { id: { equals: status.id } },
          limit: 1,
        });
        const statusDoc = statusResult.docs[0];
        return statusDoc?.alias || null;
      }
    } else if (typeof status === 'string') {
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
      const statusResult = await payload.find({
        collection: 'statuses',
        where: { id: { equals: status } },
        limit: 1,
      });
      const statusDoc = statusResult.docs[0];
      return statusDoc?.alias || null;
    }
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ checkClientStatus:', error.message);
  }

  return null;
}
