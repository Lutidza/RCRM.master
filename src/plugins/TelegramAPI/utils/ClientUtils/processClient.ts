// üìå –ü—É—Ç—å: src/plugins/TelegramAPI/utils/processClient.ts
// üìå –í–µ—Ä—Å–∏—è: 1.2.1
//
// [CHANGELOG]
// - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ TS18048, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º undefined –¥–ª—è existingClient.
// - –£–ª—É—á—à–µ–Ω–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —è–≤–Ω—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–∏–ø–æ–≤.

import type { Payload } from 'payload';
import { checkClientStatus } from '@/plugins/TelegramAPI/utils/ClientUtils/checkClientStatus';

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "clients".
 * @param {Payload} payload - –≠–∫–∑–µ–º–ø–ª—è—Ä Payload CMS.
 * @param {number} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {number} botId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–æ—Ç–∞.
 * @param {any} fromData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram (–∏–º—è, —Ñ–∞–º–∏–ª–∏—è, username).
 * @returns {Promise<any>} –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞.
 */
export async function processClient(
  payload: Payload,
  telegramId: number,
  botId: number,
  fromData: any
): Promise<any> {
  try {
    console.log(`[processClient] Searching for client with telegram_id=${telegramId} and bot=${botId}`);

    // –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    const { docs } = await payload.find({
      collection: 'clients',
      where: { telegram_id: { equals: telegramId } },
      limit: 1,
    });

    let client: any;

    if (!docs || docs.length === 0) {
      console.log("[processClient] No existing client found, creating a new one...");

      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
      client = await payload.create({
        collection: 'clients',
        data: {
          telegram_id: telegramId,
          bots: [botId],
          first_name: fromData.first_name ?? "",
          last_name: fromData.last_name ?? "",
          user_name: fromData.username || 'anonymous_user',
          total_visit: 1,
          last_visit: new Date().toISOString(),
          enabled: "enabled", // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Payload CMS
        },
      });
    } else {
      const existingClient = docs[0]!; // –£—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ docs[0] —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

      console.log(`[processClient] Client found: ID=${existingClient.id}`);

      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è bots
      let botsArray: any[] = Array.isArray(existingClient.bots)
        ? existingClient.bots
        : existingClient.bots ? [existingClient.bots] : [];

      // –î–æ–±–∞–≤–ª—è–µ–º botId, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
      if (!botsArray.some(b => (typeof b === 'object' ? b.id.toString() === botId.toString() : b.toString() === botId.toString()))) {
        botsArray.push(botId);
        console.log(`[processClient] Bot ${botId} added to client ${existingClient.id}`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
      client = await payload.update({
        collection: 'clients',
        id: existingClient.id,
        data: {
          bots: botsArray,
          first_name: fromData.first_name ?? existingClient.first_name ?? "",
          last_name: fromData.last_name ?? existingClient.last_name ?? "",
          user_name: fromData.username || existingClient.user_name || 'anonymous_user',
          last_visit: new Date().toISOString(),
          total_visit: (existingClient.total_visit ?? 0) + 1,
        },
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º checkClientStatus)
    const statusAlias = await checkClientStatus(payload, client.status);
    const isBanned = statusAlias === 'banned';

    if (isBanned) {
      console.log(`[processClient] Client ID=${client.id} is banned. Updating status...`);
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞, –æ—Ç–∫–ª—é—á–∞—è –µ–≥–æ
      client = await payload.update({
        collection: 'clients',
        id: client.id,
        data: {
          enabled: "disabled",
        },
      });
      client.isBanned = true;
    } else {
      client.isBanned = false;
    }

    return client;
  } catch (error: any) {
    console.error("[processClient] Error processing client:", error);
    return { total_visit: 1 };
  }
}
