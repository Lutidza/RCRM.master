// üìå –ü—É—Ç—å: src/plugins/TelegramAPI/utils/ClientUtils/bannedClient.ts
// üìå –í–µ—Ä—Å–∏—è: 1.1.0
//
// [CHANGELOG]
// - –í—ã–Ω–µ—Å–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é `checkClientStatus`.
// - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.

import type { Context } from 'grammy';
import type { Payload } from 'payload';
import { log } from '@/plugins/TelegramAPI/utils/SystemUtils/Logger';
import { checkClientStatus } from './checkClientStatus';

interface SessionData {
  previousMessages: number[];
}

type BotContext = Context & { session: SessionData };

/**
 * –•—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
 * @param {Payload} payload - –≠–∫–∑–µ–º–ø–ª—è—Ä Payload CMS.
 * @returns {Function} –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ update-–ø–∞–π–ø–ª–∞–π–Ω–µ –±–æ—Ç–∞.
 */
export function bannedClientHook(payload: Payload) {
  return async (ctx: BotContext, next: () => Promise<void>): Promise<void> => {
    try {
      if (ctx.from) {
        const telegramId = ctx.from.id;

        // –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "clients"
        const { docs } = await payload.find({
          collection: 'clients',
          where: { telegram_id: { equals: telegramId } },
          limit: 1,
        });

        const client = docs.length > 0 ? docs[0] : null;

        if (client && client.status) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º alias —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
          const statusAlias = await checkClientStatus(payload, client.status);
          const isBanned = statusAlias === 'banned';

          log(
            'info',
            `[bannedClientHook] Client ID=${client.id}, status alias: ${statusAlias}, banned: ${isBanned}`,
            payload
          );

          if (isBanned) {
            await ctx.reply("üíÄ Your account is locked! üíÄ \n\n üö∑ Looks like you've been cast out‚Ä¶\n And now you can fully enjoy the void");
            // –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
            ctx.session = { previousMessages: [] };
            return; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
          }
        }
      }

      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–±–∞–Ω–µ–Ω
      await next();
    } catch (error: any) {
      log('error', `–û—à–∏–±–∫–∞ –≤ bannedClientHook: ${error.message}`, payload);
      await next(); // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  };
}
