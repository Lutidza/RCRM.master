// üìå –ü—É—Ç—å: src/plugins/TelegramAPI/index.ts
// üìå –í–µ—Ä—Å–∏—è: 5.6.0
//
// [CHANGELOG]
// - –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π.
// - –£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query —Å —Ç–∏–ø–æ–º `catalog`.
// - –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LayoutBlock.
// - –£—Ç–æ—á–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.

import type { Payload, Config, Plugin } from 'payload';
import { Bot as TelegramBot, Context, session, SessionFlavor } from 'grammy';

import Bots from '@/collections/TelegramAPI/Bots';
import Clients from '@/collections/TelegramAPI/Clients';
import { initializeBots } from '@/plugins/TelegramAPI/utils/BotUtils/initializeBots';
import { log } from '@/plugins/TelegramAPI/utils/SystemUtils/Logger';
import { sendLayoutBlock } from '@/plugins/TelegramAPI/utils/BlockUtils/LayoutBlock/LayoutBlock';
import { processMessageBlock } from '@/plugins/TelegramAPI/utils/BlockUtils/MessageBlock/index';
import { renderCatalogBlock } from '@/plugins/TelegramAPI/utils/BlockUtils/CatalogBlock/renderCatalogBlock';
import { bannedClientHook } from '@/plugins/TelegramAPI/utils/ClientUtils/bannedClient';

interface SessionData {
  previousMessages: number[];
}

type BotContext = Context & SessionFlavor<SessionData>;

const TelegramAPIPlugin: Plugin = (incomingConfig: Config): Config => {
  return {
    ...incomingConfig,
    collections: [
      ...(incomingConfig.collections || []),
      Bots,
      Clients,
    ],
    onInit: async (payload: Payload) => {
      log('info', 'TelegramAPIPlugin initialization started.', payload);
      await initializeBots(payload);

      log('info', 'TelegramAPIPlugin initialized successfully.', payload);
    },
  };
};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ–±—ã—Ç–∏–π.
 */
async function initBotWithHandlers(payload: Payload, botData: any): Promise<void> {
  try {
    // –†–∞–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if (!botData.token) {
      log('error', `–û—à–∏–±–∫–∞: —É –±–æ—Ç–∞ "${botData.name}" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω.`, payload);
      return;
    }

    const bot = new TelegramBot<BotContext>(botData.token);

    bot.use(
      session<SessionData, BotContext>({
        initial: () => ({ previousMessages: [] }),
      }),
    );

    bot.use(bannedClientHook(payload)); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    bot.command('start', async (ctx) => {
      try {
        const telegramId = ctx.from?.id;
        if (!telegramId) {
          await ctx.reply('–û—à–∏–±–∫–∞: Telegram ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
          throw new Error('Telegram ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
        }

        const layoutAlias = botData.interface?.defaultStartLayout || 'start';
        const layoutBlock = botData.interface?.blocks?.find(
          (block: any) => block.alias === layoutAlias,
        );

        if (!layoutBlock) {
          await ctx.reply(`–û—à–∏–±–∫–∞: Layout "${layoutAlias}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
          return;
        }

        await sendLayoutBlock(ctx, layoutBlock, payload);
        log('info', `/start —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`, payload);
      } catch (error: any) {
        log('error', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start: ${error.message}`, payload);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
    bot.on('callback_query:data', async (ctx) => {
      try {
        const data = ctx.callbackQuery?.data;
        if (!data) {
          await ctx.reply('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ callback –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
          throw new Error('–î–∞–Ω–Ω—ã–µ callback –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
        }

        const [cbType, cbAlias] = data.split('|');

        switch (cbType) {
          case 'layout': {
            const layoutBlock = botData.interface?.blocks?.find(
              (block: any) => block.alias === cbAlias,
            );
            if (!layoutBlock) {
              await ctx.reply(`–õ–µ–π–∞—É—Ç —Å alias "${cbAlias}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
              return;
            }
            await sendLayoutBlock(ctx, layoutBlock, payload);
            log('info', `Layout "${cbAlias}" —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.`, payload);
            break;
          }
          case 'message': {
            await processMessageBlock(ctx, { message: cbAlias });
            log('info', `MessageBlock "${cbAlias}" —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.`, payload);
            break;
          }
          case 'catalog': {
            await renderCatalogBlock(ctx, { alias: cbAlias }, payload);
            log('info', `CatalogBlock "${cbAlias}" —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.`, payload);
            break;
          }
          default:
            await ctx.reply(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø callback: ${cbType}`);
            log('debug', `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø callback: ${cbType}`, payload);
        }

        await ctx.answerCallbackQuery();
      } catch (error: any) {
        log('error', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_query: ${error.message}`, payload);
      }
    });

    bot.start();
    log('info', `ü§ñ –ë–æ—Ç "${botData.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.`, payload);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
    await payload.update({
      collection: 'bots',
      id: botData.id,
      data: {
        initialization_status: 'Initialized',
        last_initialized: new Date().toISOString(),
      },
    });
  } catch (error: any) {
    log('error', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ "${botData.name}": ${error.message}`, payload);
    await payload.update({
      collection: 'bots',
      id: botData.id,
      data: { initialization_status: 'Error' },
    });
  }
}

export default TelegramAPIPlugin;
